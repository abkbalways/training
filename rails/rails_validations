Rails validations by Ajay Agrawal at Beryl Systems,

1. valid? and invalid?

class Student < ApplicationRecord
  validates :name, presence: true
end


student = Student.create
student.valid?
 => false             // It returns false because we don't give name , which is necessary.

student.invalid?
 => true              // It returns true because student object is invalid.


---------------------------------------------------------------------------------

2. errors[]

By the help of errors method , we can see the errors for invalid object

For Example :

student.errors
=> #<ActiveModel::Errors [#<ActiveModel::Error attribute=name, type=blank, options={}>]> // It returns the all errors 

student.errors.size                                                                      // It returns the size of errors
=> 1 

student.errors.objects.first.full_message                                                // It returns the message of first error.
=> "Name can't be blank" 

-----------------------------------------------------------------------------------

3. comparison

It is used for compare the value of attribute with given value.

class Student < ApplicationRecord
  validates :student_id, comparison: {greater_than: 100}
end

student = Student.create(student_id:97,name:'RAHUL',city:'DELHI',mobile:'9865983256',section_id:'C1',dob:'2005-02-02')

student.valid?
 => false 

student.errors
 => #<ActiveModel::Errors [#<ActiveModel::Error attribute=student_id, type=greater_than, options={:count=>100, :value=>97}>]> 

student.errors.objects.first.full_message
=> "Student must be greater than 100" 

--------------------------------------------------------------------------------------

4. exclusion

It is used for exclude some specific words from inserting into attribute.

class Student < ApplicationRecord
  validates :city, exclusion: {in: %w(palwal hodal), message: "%{value} is not allowed."}
end

student = Student.create(student_id:111,name:'RAHUL',city:'palwal',mobile:'9865983256',section_id:'C1',dob:'2005-02-02')
 => #<Student:0x00007f33745e1ee8 

student.valid?
 => false 

student.errors.objects.first.full_message
 => "City palwal is not allowed." 

----------------------------------------------------------------------------------------

5. format

It allows insert data in attribute only when they formatted as defined.

class Student < ApplicationRecord
  validates :name, format: {with: /\A[A-Za-z]+\z/ , message: "only letters allowed"}
end

student = Student.create(student_id:111,name:'RAHUL34',city:'DELHI',mobile:'9865983256',section_id:'C1',dob:'2005-02-02')
 => 
#<Student:0x00007faacc2bb258      

student.valid?
 => false 

student.errors.objects.last.full_message
 => "Name only letters allowed" 

student.errors.objects.last.message
 => "only letters allowed" 

--------------------------------------------------------------------------------------------

6. inclusion

It doesn't allow data if it is not in inclusion block for specific attribute.

class Student < ApplicationRecord
  validates :section_id, inclusion: {in: %w("C1" "C2" "C3" "C4" "C5"), message: "%{value} is not valid section id"}
end

student = Student.create(student_id:111,name:'RAHUL',city:'DELHI',mobile:'9865983256',section_id:'C6',dob:'2005-02-02')
 => 
#<Student:0x00007fa4741d8920   

student.valid?
 => false 

student.errors.objects.last.message
 => "C6 is not valid section id" 

student.errors.objects.last.full_message
 => "Section C6 is not valid section id" 

-----------------------------------------------------------------------------------------------

7. length

It is used for set maximum, minimum and equals length of character for column.

class Student < ApplicationRecord
  validates :name, length: {minimum:3, too_short: "%{count} characters minimum allowed"}
  validates :mobile, length: {is:10, message: "%{count} numbers is required"}
  validates :city, length: {maximum:10, too_long: "%{count} characters is maximum allowed"}
end

student = Student.create(student_id:111,name:'RA',city:'BHUVNESHWAR',mobile:'95865983256',section_id:'C5',dob:'2005-02-02')
 => 
#<Student:0x000055d7abcdff90  

student.valid?
 => false 

student.errors
 => #<ActiveModel::Errors [
#<ActiveModel::Error attribute=name, type=too_short, options={:count=>3, :message=>"%{count} characters minimum allowed"}>, 
#<ActiveModel::Error attribute=mobile, type=wrong_length, options={:message=>"%{count} numbers is required", :count=>10}>, 
#<ActiveModel::Error attribute=city, type=too_long, options={:count=>10, :message=>"%{count} characters is maximum allowed"}>]> 

student.errors.objects.first.message
 => "3 characters minimum allowed" 

student.errors.objects.first.full_message
 => "Name 3 characters minimum allowed" 

student.errors.objects.second.full_message
 => "Mobile 10 numbers is required" 

student.errors.objects.last.full_message
 => "City 10 characters is maximum allowed"

------------------------------------------------------------------------------------

8. numericality

class Student < ApplicationRecord
  validates :student_id, numericality: true
end

student = Student.create(student_id:"AD",name:'RAHUL',city:'DELHI',mobile:'9586593256',section_id:'C5',dob:'2005-02-02')

student.valid?
 => false 

student.errors.objects.each{|error| puts error.full_message}
Student is not a number     

For set integer,

 validates :student_id, numericality: { only_integer: true }

--------------------------------------------------------------------------------------

9. presence

It is used for validate the presence of data for specific column.

class Student < ApplicationRecord
  validates :name, presence: true
end


student = Student.create
student.valid?
 => false             // It returns false because we don't give name , which is necessary.

student.invalid?
 => true              // It returns true because student object is invalid.

-----------------------------------------------------------------------------------------

10. absence

It is used for set some field as blank.

class Student < ApplicationRecord
  validates :mobile, absence: true
end


student = Student.create(student_id:111,name:'RAHUL',city:'DELHI',mobile:'9586593256',section_id:'C5',dob:'2005-02-02')
 => 
#<Student:0x00007f68709b7668        

student.errors.objects.first.full_message
 => "Mobile must be blank" 

-------------------------------------------------------------------------------------------

11. uniqueness

It is used for set some field as unique.

class Student < ApplicationRecord
  validates :name, uniqueness: true
end

student = Student.create(student_id:111,name:'DEEPAK',city:'DELHI',mobile:'9586593256',section_id:'C5',dob:'2005-02-02')
  TRANSACTION (0.5ms)  BEGIN
  Student Exists? (1.0ms)  SELECT 1 AS one FROM "students" WHERE "students"."name" = $1 LIMIT $2  [["name", "DEEPAK"], ["LIMIT", 1]]
  TRANSACTION (0.4ms)  ROLLBACK                                                                    
 =>                                                                                                
#<Student:0x000056386994a0f0             

student.errors.objects.first.full_message
 => "Name has already been taken" 

-----------------------------------------------------------------------------------------------

12. validates_each



-----------------------------------------------------------------------------------------------

13. validates_with

-------------------------------------------------------------------------------------------------------------------------------

COMMON VALIDATION OPTIONS : - 

1. :allow_nil or :allow_blank

It is the validation which allow nil or empty string.

class Student < ApplicationRecord
  validates :name, uniqueness: true, allow_nil: true
end

student = Student.create(student_id:111,name:'',city:'DELHI',mobile:'9586593256',section_id:'C5',dob:'2005-02-02')
  TRANSACTION (0.4ms)  BEGIN
  Student Exists? (0.7ms)  SELECT 1 AS one FROM "students" WHERE "students"."name" = $1 LIMIT $2  [["name", ""], ["LIMIT", 1]]
  Student Create (1.2ms)  INSERT INTO "students" ("student_id", "name", "city", "mobile", "section_id", "dob", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["student_id", 111], ["name", ""], ["city", "DELHI"], ["mobile", "9586593256"], ["section_id", "C5"], ["dob", "2005-02-02"], ["created_at", "2022-01-25 11:02:20.887193"], ["updated_at", "2022-01-25 11:02:20.887193"]]
  TRANSACTION (28.8ms)  COMMIT                                                                     
 =>                                                                                                
#<Student:0x00007f32089f3cb0                                           

student.valid?
  Student Exists? (1.1ms)  SELECT 1 AS one FROM "students" WHERE "students"."name" = $1 AND "students"."id" != $2 LIMIT $3  [["name", ""], ["id", 18], ["LIMIT", 1]]                                                                             
 => true                     

---------------------------------------------------------------

2. message

It is used for write the message, which is shown when specific validation failed.

validates :name, presence: { message: "must be given please" }

validates :age, numericality: { message: "%{value} seems wrong" }

 validates :username,
    uniqueness:{ message: ->(object, data) do
        "Hey #{object.name}, #{data[:value]} is already taken."
      end
                 }

----------------------------------------------------------------

3. :on

The :on option lets you specify when the validation should happen. The default behavior for all the built-in validation helpers is 
to be run on save (both when you're creating a new record and when you're updating it). If you want to change it, you can use on: :create 
to run the validation only when a new record is created or on: :update to run the validation only when a record is updated.

Example :

person = Person.new(age: 'thirty-three')
person.valid?
person.valid?(:account_setup)
person.errors.messages

---------------------------------------------------------------------------------------------------------------------------

STRICT VALIDATIONS :-

class Student < ApplicationRecord
  validates :name, presence: true, uniqueness: true, strict: NameGenerationException
end

student = Student.create(student_id:111,name:'',city:'DELHI',mobile:'9586593256',section_id:'C5',dob:'2005-02-02')

/home/beryl/training/rails/projects/library_management_system/app/models/student.rb:11:
in `<class:Student>': uninitialized constant Student::NameGenerationException (NameError)       


----------------------------------------------------------------------------------------------------------------------------

