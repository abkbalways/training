Rails Associations by Ajay Agrawal at Beryl Systems,

1. has_many : 

A has_many association is similar to has_one, but indicates a one-to-many connection with another model. You'll often find this association 
on the "other side" of a belongs_to association. This association indicates that each instance of the model has zero or more instances of 
another model.

Ex :

class Borrow < ApplicationRecord
  validates :accept, acceptance: true
  belongs_to :student
end

class Student < ApplicationRecord
  has_many :borrows
end

Queries :

(a)

borrow = Borrow.first

borrow.student.name
=> "NANDINI"  

------------------------------------------------------------------------------------------------


2. has_many :through

A has_many :through association is often used to set up a many-to-many connection with another model. This association indicates that the 
declaring model can be matched with zero or more instances of another model by proceeding through a third model. For example, consider a 
medical practice where patients make appointments to see physicians.

Example :

class Appointment < ApplicationRecord
  belongs_to :patient
  belongs_to :physician
end


class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end


class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

Queries :

(a)

patient = Patient.find(6)

patient.physicians.first.name

=> "Dr. Urmila Yadav"           // We don't have any relation between patient and physician directly. but through appointment we can access
                                   physicians of patient directly.

(b)

patient.physicians

=> [#<Physician:0x00007ff3c0b05cf0 id: 2, name: "Dr. Urmila Yadav">, #<Physician:0x00007ff3c0b05ae8 id: 3, name: "Dr. Gargi Deshmukh">] 

------------------------------------------------------------------------------------------------

3. has_one

A has_one association indicates that one other model has a reference to this model. That model can be fetched through this association.

It is bidirectional association.

Example :

class Department < ApplicationRecord
  has_one :manager
end

class Manager < ApplicationRecord
  belongs_to :department
end

Queries :

(a)

 department = Department.first

 department.manager.name
 => "Yashika" 

(b)
 
 manager = Manager.first

 manager.department.name
 => "Interns"

--------------------------------------------------------------------------------------------------

4. belongs_to

A belongs_to association sets up a connection with another model, such that each instance of the declaring model "belongs to" one instance 
of the other model.
It is one side association.

Example:

class Manager < ApplicationRecord
  belongs_to :department
end
 
Queries :

(a) 

 manager = Manager.first

 manager.department.name
 
 => "Interns"

(b)
 
 department = Department.first

 department.manager.name            //It returns error , because it is one side association from manager to department.

 /usr/share/rvm/gems/ruby-3.0.1/gems/activemodel-7.0.1/lib/active_model/attribute_methods.rb:458:in `method_missing': undefined method 
 `manager' for #<Department id: 1, name: "Engineering"> (NoMethodError)

--------------------------------------------------------------------------------------------

5. has_one :through

A has_one :through association sets up a one-to-one connection with another model. This association indicates that the declaring model 
can be matched with one instance of another model by proceeding through a third model.

Example :

class Department < ApplicationRecord
  has_one :manager
  has_one :manager_detail, through: :manager
end

class ManagerDetail < ApplicationRecord
  belongs_to :manager
end

class Manager < ApplicationRecord
  belongs_to :department
  has_one :manager_detail
end


Queries :

department = Department.first

department.manager_detail.salary
=> 80000

----------------------------------------------------------------------------------------------

6. has_and_belongs_to_many

A has_and_belongs_to_many association creates a direct many-to-many connection with another model, with no intervening model. This 
association indicates that each instance of the declaring model refers to zero or more instances of another model.

Steps :

1. Define has_and_belongs_to_many in both modles

class Student < ApplicationRecord
  has_and_belongs_to_many :books
end

class Book < ApplicationRecord
  has_and_belongs_to_many :students
end

2. Create a migration for joint table (alphabetically table name)

rails g migration create_books_students_join_table

class CreateBooksStudentsJoinTable < ActiveRecord::Migration[7.0]
  def change
    create_join_table :books, :students
  end
end

rails db:migrate


Queries:

Enter data in join table,

student = Student.first

student.books << books.where(id:1001)
 
----------------------------------------------------------------------------------------------

7. polymorphic association

A slightly more advanced twist on associations is the polymorphic association. With polymorphic associations, a model can belong to more 
than one other model, on a single association. 

Example :

class Event < ApplicationRecord
  has_many :comments, as: :commentable
end

class News < ApplicationRecord
  has_many :comments, as: :commentable
end

class Comment < ApplicationRecord
  belongs_to :commentable, polymorphic: true
end

Queries :

event = Event.first

event.comments.create(title:event.name)

INSERT INTO "comments" ("title", "commentable_id", "commentable_type") VALUES ($1, $2, $3) RETURNING "id"  
[["title", "Pratibha-2022"], ["commentable_id", 1], ["commentable_type", "Event"]]  

--------------------------------------------------------------------------------------------------

8. self join

In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all 
employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be 
modeled with self-joining associations:

Example :

class CreateEmployees < ActiveRecord::Migration[7.0]
  def change
    create_table :employees do |t|
      t.string :name
      t.references :manager, foreign_key: { to_table: :employees }
    end
  end
end


class Employee < ApplicationRecord
  has_many :subordinates, class_name: "Employee",
                          foreign_key: "manager_id"

  belongs_to :manager, class_name: "Employee", optional: true
end

Queries :

employee = Employee.first

employee.manager.name
=> "Prakash"

----------------------------------------------------------------------------------------------------------------
