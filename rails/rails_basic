Rails By Ajay Agrawal at Beryl Systems , 

To develop a web application using Ruby on Rails Framework, you need to install the following software âˆ’

    Ruby
    The Rails Framework
    A Web Server
    A Database System

We assume that you already have installed a Web Server and a Database System on your computer. You can use the WEBrick Web Server, 
which comes with Ruby. Most websites however use Apache or lightTPD web servers in production.

Rails works with many database systems, including MySQL, PostgreSQL, SQLite, Oracle, DB2 and SQL Server. Please refer to a corresponding 
Database System Setup manual to set up your database.

-----------------------------------------------------------------------------------------------------------------------

Installation of rails on Linux :

1. check rails version 

rails -v

if rails already installed , it gives the version of rails otherwise gives error "rails command not found". 

2. Install rails

If rails not find, install the rails by just run that command

gem install rails   // For install new version

gem install rails -v 5.0.0   // For install specified version

Now rails is installed , check by just run command "rails -v"

3. For install dependancies of pg (It is used for run various commands)

sudo apt install libpq-dev

4. For install pg

gem install pg

----------------------------------------------------------------------------------------------------------------------

For create new project of rails :

rails new <name of the project>   // it takes sql database by default

rails new <name of the project>  -d postgresql   // it takes user defined database

It creates rails project on the location at which we run that command.

---------------------------------------------------------------------------------------------------------------------- 

Setup config for database.yml :

in <project-name>/config/database.yml

uncomment and edit the information ,

database :

username :

password :

host :

port :

------------------------------------------------------------------------------------------------------------------------

For create database on local machine corresponding to project :

rack db:create

It creates database as name in database.yml of project to local machine.

For drop or delete the database , 

rack db:drop

------------------------------------------------------------------------------------------------------------------------

for create a table model :

rails generate model <name of model in singular form>

Ex : rails generate model book

It will create ,

invoke  active_record
      create    db/migrate/20220122063929_create_books.rb
      create    app/models/book.rb
      invoke    test_unit
      create      test/models/book_test.rb
      create      test/fixtures/books.yml

-------------------------------------------------------------------------------------------------------------------------

For add columns in models :

in db/migrate/20220122063929_create_books.rb,

      t.column :name, :string
      t.column :isbn, :int
      t.column :price, :float

write the column names and properties as above.

then run command rails db:migrate for migrate the table to local database.



After db : migrate ,

== 20220122063929 CreateBooks: migrating ======================================
-- create_table(:books)
   -> 0.2221s
== 20220122063929 CreateBooks: migrated (0.2223s) =============================
 


We can see out table in our database,

library_management_system=# select * from books;
 id | name | isbn | price | created_at | updated_at 
----+------+------+-------+------------+------------
(0 rows)

----------------------------------------------------------------------------------------------------------------------------

Migrations for Alter Table :

1. First of all create migration,

rails generate migration AddBookIdToBooks book_id:string

// It will create add column migration.

class AddBookIdToBooks < ActiveRecord::Migration[7.0]
  def change
    add_column :books, :book_id, :string
  end
end

After that, run 

rails db:migrate

for confirm change in table.

------------------------------------------------------------

2. For delete the column 

rails generate migration RemoveBookIdToBooks book_id:string

After that, 

class RemoveBookIdToBooks < ActiveRecord::Migration[7.0]
  def change
    remove_column :books, :book_id, :string
  end
end

then, migrate the change by

rails db:migrate

-------------------------------------------------------------

3. For change the name of column

rails generate migration ChangeIsbnToBooks 

After that,

class ChangeIsbnToBooks < ActiveRecord::Migration[7.0]
  def change
    rename_column :books, :isbn , :book_id_new
  end
end

then, migrate the change by

rails db:migrate

-------------------------------------------------------------

4. For Add index in table

rails g migration AddIndexBooks 

class AddIndexBooks < ActiveRecord::Migration[7.0]
  def change
    add_index :books, :name
  end
end

then, migrate the change by

rails db:migrate

-------------------------------------------------------------

5. For change datatype of column

rails g migration ChangeColumnToBooks 

class ChangeColumnToBooks < ActiveRecord::Migration[7.0]
  def change
    change_column :books, :name, :text
  end
end

then, migrate the change by

rails db:migrate

--------------------------------------------------------------

6. For Add Foreign Key

rails g migration AddForeignKeyToBorrows 

class AddForeignKeyToBorrows < ActiveRecord::Migration[7.0]
  def change
    add_foreign_key :borrows, :books, column: :book_id, column: :book_id
  end
end

then, migrate the change by

rails db:migrate

----------------------------------------------------------------

7. For Delete Foreign Key

rails g migration RemoveForeignKeyToBorrows

class RemoveForeignKeyToBorrows < ActiveRecord::Migration[7.0]
  def change
    remove_foreign_key :borrows,column: :book_id
  end
end

then, migrate the change by

rails db:migrate

------------------------------------------------------------------

8. For remove Timestamps From Table

It will remove timestamps (created_at and updated_at) from table.

rails g migration RemoveTimeStampsFromBooks 

class RemoveTimeStampsFromBooks < ActiveRecord::Migration[7.0]
  def change
    remove_timestamps(:borrows)
  end
end

then, migrate the change by

rails db:migrate

--------------------------------------------------------------------

9. For Add Timestamps From Table

It will add created_at and updated_at to table (if not found in table), otherwise gives error.

rails g migration AddTimeStampsToBooks 

class AddTimeStampsToBooks < ActiveRecord::Migration[7.0]
  def change
    add_timestamps(:borrows)
  end
end

then, migrate the change by

rails db:migrate

----------------------------------------------------------------------

10. For Rename index in Table

rails g migration RenameIndexFromBooks 

class RenameIndexFromBooks < ActiveRecord::Migration[7.0]
  def change
    rename_index :books, 'index_books_on_name', 'name_index'
  end
end

then, migrate the change by

rails db:migrate

-----------------------------------------------------------------------

11. For Remove index from Table

rails g migration RemoveIndexFromBooks 

class RemoveIndexFromBooks < ActiveRecord::Migration[7.0]
  def change
    remove_index :books, :name
  end
end

then, migrate the change by

rails db:migrate

------------------------------------------------------------------------

12. For Add column by up and down

up and down method is not good for use in all cases. It was used for rollback of migrations previously. But now in updated versions of 
rails, in most cases it will done by self.

Use of up and down,

 rails g migration ChangeBooks 

class ChangeBooks < ActiveRecord::Migration[7.0]
  def up
    add_column :books, :fine, :integer
  end
  def down
    remove_column :books, :fine
  end
end

then, migrate the change by

rails db:migrate

Important : down must contain reversible of up.

-----------------------------------------------------------------------------------------------------------------------------------

For Change previous migration :

rails db:rollback

It is used for change table to previous migration stage table. It is only one time reversible.

-------------------------------------------------------------------------------------------------------------------------------------

Queries For data in table :

1. For Add data into table :

book = Book.create(isbn:1010,name:"PHYSICS CLASS XI",author:"HC VERMA",price:680,book_range:10,fine_per_day:15,copies:20)

or 

book = Book.create
book.isbn = 1010
book.name = "PHYSICS CLASS XI"
book.author = "HC VERMA"
book.price = 680
book.book_range = 10
book.fine_per_day = 15
book.copies = 20
book.save              #for save this info to database , create automaticly save information and thats not use save.

-------------------------------------------------

2. For Read inserted data

books = Book.all
books

It will add all data into books in form of array . now we can read data by books array.

(a) For read data by index :

3.0.1 :033 > books[0]
 => 
#<Book:0x00007fd95cc92010                            
 id: 2,                                              
 isbn: 1002,                                         
 name: "STEP TOWARDS SUCCESS",                       
 author: "DR. RAMANUJAN",                            
 price: 450.0,                                       
 book_range: 20,                                     
 fine_per_day: 15.0,                                 
 copies: 10>      

(b) For read last inserted data :

3.0.1 :034 > books.last
 => 
#<Book:0x00007fd95cc91908                            
 id: 1,                                              
 isbn: 1001,                                         
 name: "TARASH",                                     
 author: "JAVED AKHTAR JI",                          
 price: 250.0,                                       
 book_range: 15,                                     
 fine_per_day: 20.0,                                 
 copies: 15>            

(c) For read data orderwise

3.0.1 :037 > books.order(isbn: :desc)

-------------------------------------------------------------------------------

3. For Update the Data

book = books.find_by(isbn:1001)          //Make a object of books where isbn = 1001
book.name = "TARASH"                    //change name
book.save                                //save that to database

or

book = books.find_by(isbn:1001)
book.update(name:"TARKASH")

---------------------------------------------------------------------------------

4. For Delete the Data

book = books.find_by(isbn:1011)
book.destroy

# For Destroy all

Book.destroy_all

#By one command delete one row

Book.destroy_by(isbn:1011)

-----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------


--------------------------------------------------------------------------------
