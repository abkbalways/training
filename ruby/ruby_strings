Ruby Strings By Ajay Agrawal at Beryl Systems 


Strings : 

A string object in ruby holds and manipulates an arbitrary sequence of one or more bytes, typically representing characters that represent human language.

The Simplest string enclosed in single quotes .

Example :

my_name ='Ajay'    #my_name is the varible which holds 'Ajay' string

puts my_name


OUTPUT :

Ajay


-> Apostrophe Character

If we need to place apostrophe character in single quote , precided by backslash (\).

Example :

text ='I don\'t have a dog'

puts text


OUTPUT :

I don't have a dog

----------------------------------------------------------------------------------------------------------------------------------------

String Methods :


1. sub and sub!

sub - It is used for substitute the given string, but it substitute string temporarily and if we use that string again it respond like previous string.

Ex -

puts "Enter Your Name :"
text =gets
puts text.sub(text,'Student') #Substitute input name by Student
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Ajay


it substitute only first word or character of a string.

Example :

text ="hello"
puts text.sub('l','*') #Substitute hello

OUTPUT :

he*lo


sub! - It is used for substitute the given string, it substitute string permanently. if we use string again it respond like new updated string.

Example :

puts "Enter Your Name :"
text =gets
puts text.sub!(text,'Student') #Substitute input name by Student Permanently
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Student

.....................................................................................................................................

2. gsub 

It is used for temporarily substitute character or word globally .

Example :

text ="hello"
puts text.gsub('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
hello


gsub! - It is used for permanently substitute character or word globally.

Example :

text ="hello"
puts text.gsub!('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
he**o

........................................................................................................................................

3. Methods for creating a String

new :

It is used for create new string .

Ex :

s = String.new

s1 = String.new("Ajay")

s2 = String.new(capacity: 20)   # it is used for make initial capacity of string buffer

s3 = String.new(encoding: 'UTF-8') # With encoding keyword, returns a copy of string with specified encoding


try_convert :

Its return a new string , created from  a given object.

.......................................................................................................................................

4. Methods for freeze String

-> string.freeze

It is used for freeze a string , it means we cannot update that.

Ex :

a='ajay'
a.freeze
a << ' agrawal'
puts a

OUTPUT :

Traceback (most recent call last):
test.rb:3:in `<main>': can't modify frozen String: "ajay" (FrozenError)


-> string.frozen?

It is used for check string is freeze or not. it returns true or false.

Example :

a='ajay'
a.freeze
puts a
puts a.frozen?

OUTPUT :

ajay
true


.......................................................................................................................................


5. Methods for Querying String

-> length,size

It is used for count the characters in string.

Example :

a='ajay'
b='rahul'
puts a.length
puts b.size

OUTPUT :

4
5


-> empty?

It is used for check string is empty or not . it returns input or output.

Example : 

a=String.new('Ajay')
b=String.new
puts a.empty?
puts b.empty?

OUTPUT :

false
true

-> bytesize

It is used for print return bytesize of string.\

Example :

a=String.new('Ajay')
b=String.new
puts a.bytesize
puts b.bytesize

OUTPUT :

4
0

-> count

It is used for count the substring or specific characters.

Example :

a=String.new('My name is Ajay')
b= a.count "/[Aa]/"  # it counts the both A or a
puts "The Occurence of A or a is #{b}"


OUTPUT :

The Occurence of A or a is 3


.........................................................................................................................................

6. Methods for Querying Substrings

-> =~

It returns the index of first substring that matches the given regex. Indexing is start from 0 and goes on till length-1.

Example :

a="Ajay"
puts a =~ /a/


OUTPUT :

2


-> index

It returns the index of first occurence of given substring.

Ex :

a='While writing any topic in an exam or competition needs paras.'
puts a.index('an')

OUTPUT :

14

-> rindex

It returns the index of last occurence of given substring.\

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.rindex('an')

OUTPUT :

27

-> include

It returns true if substring is found in string , other wise false .

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.include?('an')
puts a.include?('ana')


OUTPUT :

true
false

-> match

It returns the matched substring , if it is matched otherwise nil.

Example :

a='While writing any topic in an exam or competition needs or paras.'
b= a.match(/any/)
c= a.match('abc')
puts ("matched substring of any is #{b} .")
puts ("matched substring of abc is #{c} .")


OUTPUT :

matched substring of any is any .
matched substring of abc is  .

-> match?

It retrns the true if string is matched with a regex , otherwise false.

Example :

a='While writing any topic in an exam or competition needs or paras.'
puts a.match?(/any/)
puts a.match?('abc')

OUTPUT :

true
false

-> start_with?

It gives true if string is start with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with vowels ?"
puts a.start_with?(/[aeiou]/)
puts "string a is starting with consonants ?"
puts a.start_with?(/[bcdfghjklmnpqrstvwxyz]/)

OUTPUT :

string a is starting with vowels ?
false
string a is starting with consonants ?
true


->end_with

It gives true if string is end with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with dot(.) ?"
puts a.end_with?('.')

OUTPUT :

string a is starting with dot(.) ?
true

......................................................................................................................................

7. Methods for Querying Encodings

-> encoding

It is used for return the encoding type which is used by string.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts a.encoding

OUTPUT :

UTF-8

-> unicode_normalized

It is used for check , string is in unicode normalized form or not. It returns the true or false.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts "string a is in unicode normalized form ? "
puts a.unicode_normalized?


OUTPUT :

string a is in unicode normalized form ? 
true

-> valid_encoding 

It returns true if string is encoded correctly otherwise false.

Example :

a= "\xc2\xa1"
b= "\xC3"
c=  "\x80"

puts a.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("iso-8859-1").valid_encoding?
puts c.force_encoding("utf-8").valid_encoding?

OUTPUT :

true
false
true
false

-> ascii_only

It returns true only if string contains all ascii characters , otherwise false.

Example :

text1="i dont know about Ï’" 
text2="i dont know about i"
puts "text1 has only ascii characters ?"
puts text1.force_encoding("utf-8").ascii_only?
puts "text2 has only ascii characters ?"
puts text2.force_encoding("utf-8").ascii_only?


OUTPUT :

text1 has only ascii characters ?
false
text2 has only ascii characters ?
true

---------------------------------------------------------------------------------------------------------------------------------------
