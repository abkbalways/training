Ruby Strings By Ajay Agrawal at Beryl Systems 


Strings : 

A string object in ruby holds and manipulates an arbitrary sequence of one or more bytes, typically representing characters that represent human language.

The Simplest string enclosed in single quotes .

Example :

my_name ='Ajay'    #my_name is the varible which holds 'Ajay' string

puts my_name


OUTPUT :

Ajay


-> Apostrophe Character

If we need to place apostrophe character in single quote , precided by backslash (\).

Example :

text ='I don\'t have a dog'

puts text


OUTPUT :

I don't have a dog

----------------------------------------------------------------------------------------------------------------------------------------

String Methods :


1. sub and sub!

sub - It is used for substitute the given string, but it substitute string temporarily and if we use that string again it respond like previous string.

Ex -

puts "Enter Your Name :"
text =gets
puts text.sub(text,'Student') #Substitute input name by Student
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Ajay


it substitute only first word or character of a string.

Example :

text ="hello"
puts text.sub('l','*') #Substitute hello

OUTPUT :

he*lo


sub! - It is used for substitute the given string, it substitute string permanently. if we use string again it respond like new updated string.

Example :

puts "Enter Your Name :"
text =gets
puts text.sub!(text,'Student') #Substitute input name by Student Permanently
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Student

.....................................................................................................................................

2. gsub 

It is used for temporarily substitute character or word globally .

Example :

text ="hello"
puts text.gsub('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
hello


gsub! - It is used for permanently substitute character or word globally.

Example :

text ="hello"
puts text.gsub!('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
he**o

........................................................................................................................................

3. Methods for creating a String

new :

It is used for create new string .

Ex :

s = String.new

s1 = String.new("Ajay")

s2 = String.new(capacity: 20)   # it is used for make initial capacity of string buffer

s3 = String.new(encoding: 'UTF-8') # With encoding keyword, returns a copy of string with specified encoding


try_convert :

Its return a new string , created from  a given object.

.......................................................................................................................................

4. Methods for freeze String

-> string.freeze

It is used for freeze a string , it means we cannot update that.

Ex :

a='ajay'
a.freeze
a << ' agrawal'
puts a

OUTPUT :

Traceback (most recent call last):
test.rb:3:in `<main>': can't modify frozen String: "ajay" (FrozenError)


-> string.frozen?

It is used for check string is freeze or not. it returns true or false.

Example :

a='ajay'
a.freeze
puts a
puts a.frozen?

OUTPUT :

ajay
true


.......................................................................................................................................


5. Methods for Querying String

-> length,size

It is used for count the characters in string.

Example :

a='ajay'
b='rahul'
puts a.length
puts b.size

OUTPUT :

4
5


-> empty?

It is used for check string is empty or not . it returns input or output.

Example : 

a=String.new('Ajay')
b=String.new
puts a.empty?
puts b.empty?

OUTPUT :

false
true

-> bytesize

It is used for print return bytesize of string.\

Example :

a=String.new('Ajay')
b=String.new
puts a.bytesize
puts b.bytesize

OUTPUT :

4
0

-> count

It is used for count the substring or specific characters.

Example :

a=String.new('My name is Ajay')
b= a.count "/[Aa]/"  # it counts the both A or a
puts "The Occurence of A or a is #{b}"


OUTPUT :

The Occurence of A or a is 3


.........................................................................................................................................

6. Methods for Querying Substrings

-> =~

It returns the index of first substring that matches the given regex. Indexing is start from 0 and goes on till length-1.

Example :

a="Ajay"
puts a =~ /a/


OUTPUT :

2


-> index

It returns the index of first occurence of given substring.

Ex :

a='While writing any topic in an exam or competition needs paras.'
puts a.index('an')

OUTPUT :

14

-> rindex

It returns the index of last occurence of given substring.\

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.rindex('an')

OUTPUT :

27

-> include

It returns true if substring is found in string , other wise false .

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.include?('an')
puts a.include?('ana')


OUTPUT :

true
false

-> match

It returns the matched substring , if it is matched otherwise nil.

Example :

a='While writing any topic in an exam or competition needs or paras.'
b= a.match(/any/)
c= a.match('abc')
puts ("matched substring of any is #{b} .")
puts ("matched substring of abc is #{c} .")


OUTPUT :

matched substring of any is any .
matched substring of abc is  .

-> match?

It retrns the true if string is matched with a regex , otherwise false.

Example :

a='While writing any topic in an exam or competition needs or paras.'
puts a.match?(/any/)
puts a.match?('abc')

OUTPUT :

true
false

-> start_with?

It gives true if string is start with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with vowels ?"
puts a.start_with?(/[aeiou]/)
puts "string a is starting with consonants ?"
puts a.start_with?(/[bcdfghjklmnpqrstvwxyz]/)

OUTPUT :

string a is starting with vowels ?
false
string a is starting with consonants ?
true


->end_with

It gives true if string is end with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with dot(.) ?"
puts a.end_with?('.')

OUTPUT :

string a is starting with dot(.) ?
true

......................................................................................................................................

7. Methods for Querying Encodings

-> encoding

It is used for return the encoding type which is used by string.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts a.encoding

OUTPUT :

UTF-8

-> unicode_normalized

It is used for check , string is in unicode normalized form or not. It returns the true or false.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts "string a is in unicode normalized form ? "
puts a.unicode_normalized?


OUTPUT :

string a is in unicode normalized form ? 
true

-> valid_encoding 

It returns true if string is encoded correctly otherwise false.

Example :

a= "\xc2\xa1"
b= "\xC3"
c=  "\x80"

puts a.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("iso-8859-1").valid_encoding?
puts c.force_encoding("utf-8").valid_encoding?

OUTPUT :

true
false
true
false

-> ascii_only

It returns true only if string contains all ascii characters , otherwise false.

Example :

text1="i dont know about Ï’" 
text2="i dont know about i"
puts "text1 has only ascii characters ?"
puts text1.force_encoding("utf-8").ascii_only?
puts "text2 has only ascii characters ?"
puts text2.force_encoding("utf-8").ascii_only?


OUTPUT :

text1 has only ascii characters ?
false
text2 has only ascii characters ?
true

---------------------------------------------------------------------------------------------------------------------------------------

8. Others Querying methods in ruby :

-> sum

it gives the sum of binary values of each byte of string.

Example :

str='AB'
puts str.sum()

OUTPUT :

131

-> hash

It returns the integer hash code for strings.

Example :

str='AB'
puts str.hash


OUTPUT :

235975447823673739

-----------------------------------------------------------------------------------------------------------------------------------------

9. Methods for comparing in strings

-> == & ===

It give true if both strings has same content, otherwise false.

Example :

str1='Rahul'
str2='rahul'
str3='Rahul'
puts(str1===str2)     # use of === , it also check cases
puts(str1==str2)      # use of == , it also check cases
puts(str1===str3)     # str1 and str3 is completely equal

OUTPUT :

false
false
true

-> eql?

Returns true if content is same of both strings, otherwise false.

Example :

str1='Rahul'
str2='rahul'
str3='Rahul'
puts str1.eql?(str2)    # it also check cases
puts str1.eql?(str3)     # str1 and str3 is completely equal

OUTPUT :

false
true


-> <=>

It returns -1 if first string is smaller,1 if first string is larger and 0 if both are equal.

Example :

str1='rahul'
puts str1<=>'rahula'
puts str1<=>'rahu'
puts str1<=>'rahul'

OUTPUT :

-1
1
0

Important Point : upper case is smaller than lower case.because ASCII values of 'a' is 97 and 'A' is 65.


-> casecmp

It is used for compare two strings , ignoring thats cases. return 1  if first is bigger , -1 if first is smaller and 0 if both are equal.

Example :

str1='rahul'
str2='Rahul'
str3='Rahu'

puts str1.casecmp(str2) # both are equal because ignore cases
puts str1.casecmp(str3) # return 1 because str1 is larger than str3
puts str2.casecmp(str3) # return 1 because str2 is larger than str3

OUTPUT :

0
1
1

-> casecmp?

It is used for comparing two strings with ignore cases. it returns true if they are same othewise false.

Example :

str1='rahul'
str2='Rahul'
str3='Rahu'

puts str1.casecmp?(str2) # both are equal because ignore cases
puts str1.casecmp?(str3) # return false because str1 is not equals to str3
puts str2.casecmp?(str3) # return false because str2 is not equals to str3

OUTPUT :

true
false
false


------------------------------------------------------------------------------------------------------------------------------------- 

METHODS FOR MODIFYING A STRING

11. Insert into string

-> insert

It is used for modify string . it takes two arguments , first is position and second is substring which will be added.

Example :

str= 'rahul'
str2='rahul'
str.insert(3,'man')     #it insert after 3rd character from starting
puts str
str2.insert(-2,'man')    #it insert at 2nd position from end
puts str2

OUTPUT :

rahmanul
rahumanl


-> <<

It is used for concatenation string with substring.

Example :

str1= 'rahul'
str2=' agrawal'
str3= 'jatin'
puts str1 << str2
puts str3<<' chaudhary'

OUTPUT :

rahul agrawal
jatin chaudhary


------------------------------------------------------------------------------------------------------------------------------------------

12. Substitution of strings

-> sub - Explained above

-> gsub - Expalined above

-> succ or next 

It is used for print successor of the given string. it means last character of string is increasing by 1.

Example :

str1= 'rahul'
puts str1.succ
puts str1
puts str1.next

OUTPUT :

rahum
rahul
rahum

For change permanently use succ! or next!.

-> replace 

It is used for replace current string with another.

Example :

str1= 'rahul'
puts str1
puts str1.replace('jatin')    # replace 'rahul' by 'jatin'
puts str1

OUTPUT :

rahul
jatin
jatin


-> reverse

It is used for reverse the string.

Example :

str1= 'rahul'
puts str1
puts str1.reverse    # reverse 'rahul' 
puts str1

OUTPUT :

rahul
luhar
rahul

For reverse permanently string use reverse! .

-> setbyte

It is used for change given index substring by substring of given byte.

It takes two parameters , index of changable substring and byte of substring which will replace that.

Example :

str1= 'rahul'
str1.setbyte(2,97)   # change index 2(h) by byte 97(a)
puts str1

OUTPUT :

raaul


-> tr!

It replaces specified characters with specified replacement characters.

Example :

str1= 'i dont have doog'
str2='i have a car'
str3='my name is ajay'
str1.tr!('og','ag')
puts str1
str2.tr!('aeiou','*')
puts str2
str3.tr!('j','All')
puts str3

OUTPUT :

i dant have daag
* h*v* * c*r
my name is aAay


-> tr_s!

It is like tr!, but it removes duplicate characters also.

Example which differenciate between tr and tr_s :

str1= 'i dont have doog'
str2= 'i dont have doog'
str1.tr_s!('og','ag')
str2.tr!('og','ag')
puts str1
puts str2


OUTPUT :

i dant have dag
i dant have daag


----------------------------------------------------------------------------------------------------------------------------------------

13. Casing methods in Ruby

-> capitalize!

It is used for make first letter of string in upcase and others in downcase.

Example :

str1= 'i dont have doog'
str1.capitalize!
puts str1

OUTPUT :

I dont have doog

-> downcase!

It is used for make complete string in downcase.

Example :

str1= 'I Dont Have Doog'
str1.downcase!
puts str1

OUTPUT :

i dont have doog

-> upcase!

It is used for make complete string in uppercase.

Example :

str1= 'i dont have doog'
str1.upcase!
puts str1


OUTPUT :

I DONT HAVE DOOG

-> swapcase

It is used for swap cases of characters in string.

Example :

str1= 'I Dont Have Dog'
str1.swapcase!

puts str1


OUTPUT :

i dONT hAVE dOG


----------------------------------------------------------------------------------------------------------------------------------------

14. Ruby Methods for Deletion

-> clear 

It is used for clear complete string.

Example :

str1= 'I Dont Have Dog'
str1.clear

puts str1


OUTPUT :


-> slice! or []=

These are used for removes a substring determined by a given index, start/length, range, regexp, or substring.

Example :

str = 'My Name is ajay agrawal'
str.slice!(3)
puts str
str.slice!(3..5)
puts str
str.slice!(/a.*g/)
puts str
str.slice!("a")
puts str


OUTPUT :

My ame is ajay agrawal
My  is ajay agrawal
My  is rawal
My  is rwal

-> squeeze

It is used for remove contiguous duplicate substrings except one .

Example :

str = 'we  dont haaave a dooog'
str.squeeze!
puts str

OUTPUT :

we dont have a dog

Important : we can also give arguments for remove specific duplicate elements like spaces or any other.

-> delete!

It is used for delete all specified substrings from string.

Example :

str = 'we dont have a dog'
str.delete! "a"
puts str

OUTPUT :

we dont hve  dog

-> lstrip 

It is used for remove leading whitespaces , it means white spaces before starting of string.

Example :

str = '   we dont have a dog'
puts str
str.lstrip!
puts str


OUTPUT :

   we dont have a dog
we dont have a dog

-> rstrip

It is used for remove trailing whitespaces , it means white spaces after completion of string.

Example :

str = 'we dont have a dog   '
puts str.length
str.rstrip!
puts str.length


OUTPUT :

21
18

-> strip 

It is used for remove trailing and leading white spaces both at same time.

Example :

str = '    we dont have a dog   '
puts str
puts str.length
str.strip!
puts str
puts str.length


OUTPUT :

    we dont have a dog   
25
we dont have a dog
18

-> chomp

It will remove trailing record separator, if found.

Example :

str ="Ajay \n\r"
puts str
str.chomp!
puts str
str.chomp!
puts str

OUTPUT :
Ajay 

Ajay 
Ajay 

-> chop

It is used for remove last character of string.

Example :

str ="Ajay"
puts str
str.chop!
puts str


OUTPUT :

Ajay
Aja


---------------------------------------------------------------------------------------------------------------------------------------

METHODS FOR CONVERTING TO NEW STRING

15. Ruby methods for extensions

-> *

It is used for return concatenation of  many copies of given string.

Example :

str ="Ajay "
puts str*3
puts str

OUTPUT :

Ajay Ajay Ajay 
Ajay 

-> +

It is used for concatenation of many strings.

Example :

str1 ="Ajay "
str2 ="Rahul "
str3 ="Jatin"
puts str1+str2+str3

OUTPUT :

Ajay Rahul Jatin

-> center

It is used for increase the width of string and put string in center.

Example :

str1 ="Ajay"
puts str1.center(5) #str1 takes 5 spaces
puts str1.center(20) #str1 takes 20 spaces 8 before Ajay and 8 after
puts str1.center(20,'a') #str1 takes 20 spaces 8 before Ajay and 8 after , these filled by a


OUTPUT :

Ajay 
        Ajay        
aaaaaaaaAjayaaaaaaaa

-> concat

It is used for concatenate first given string with another given string .

Example :

str1 ="Ajay "
str2 ="Agrawal "
str1.concat(str2)
puts str1

OUTPUT :

Ajay Agrawal 

-> prepend

It is used for prepend another given string with first given string.

Example :

str1 ="Ajay "
str2 ="Agrawal "
str1.prepend(str2)
puts str1

OUTPUT :

Agrawal Ajay 


-> ljust

If integer is greater than the length of given string, returns the new string which has length equals to integer and has white spaces after string.

Example :

str1 ="Ajay"
puts str1.ljust(5)
puts str1.ljust(20)
puts str1.ljust(20,'a')

OUTPUT :

Ajay 
Ajay                
Ajayaaaaaaaaaaaaaaaa


-> rjust

If integer is greater than the length of given string, returns the new string which has length equals to integer and has white spaces before string content.

Example :

str1 ="Ajay"
puts str1.rjust(5)
puts str1.rjust(20)
puts str1.rjust(20,'a')

OUTPUT :

 Ajay
                Ajay
aaaaaaaaaaaaaaaaAjay


--------------------------------------------------------------------------------------------------------------------------------------- 

16. Ruby methods for conveting new string (Encoding)

-> b

It returns a copy of given string with ASCII-8BIT encoding.

-> scrub

If the string has invalid byte sequence then replace invalid bytes with given replacement character, else returns self.

Example :

"abc\u3042\x81".scrub #=> "abc\u3042\uFFFD"
"abc\u3042\x81".scrub("*") #=> "abc\u3042*"
"abc\u3042\xE3\x80".scrub{|bytes| '<'+bytes.unpack('H*')[0]+'>' } #=> "abc\u3042<e380>"


-> unicode_normalize

It is used for return a self string with each character unicode-normalized.

-> encode

It returns a copy of self string in which each character transcoded from one given encoding into another.

----------------------------------------------------------------------------------------------------------------------------------------- 

17. Substitution methods for converting to new string

-> dump

It returns  a printable version  of self, enclosed in double quotes, with special characters escaped, and with non-priting characters replaced by hexadecimal notation.

Example :

str1 ="Ajay \n "
puts str1
puts str1.dump

OUTPUT :

Ajay 
 
"Ajay \n "


-> undump

It is used for undumped , previously dumped string.

Example :

str1 ="Ajay  "
puts str1
str2 = str1.dump
puts str2
puts str2.undump

OUTPUT :

Ajay  
"Ajay  "
Ajay  

-> tr(from_str,to_str)

It is used for return a copy of self in which characters  in from_str replaced by characters in to_str.

Example :

str1 ="Ajay"
puts str1
puts str1.tr('a-z','*')
puts str1.tr('aeiou','*')
puts str1.tr('^aeiou','*')

OUTPUT :

Ajay
A***
Aj*y
**a*


-> tr_s 

It is used for return a copy of self in which characters in from_str replaced by characters in to_str. But it treats duplicates character (by condition) treats as one.

Example :

str1 ="Ajay"
puts str1
puts str1.tr_s('a-z','*') # print A* because all are in form a-z so, duplicates for that
puts str1.tr_s('aeiou','*') # print Aj*y because not any two characters from aeiou 
puts str1.tr_s('^aeiou','*') # print *a* because treat Aj as single , they are except from aeiou


OUTPUT :

Ajay
A*
Aj*y
*a*

-> %

It is used for return the result of formatting object into the format specification self.

Example :

puts a= "%07d"
puts a%123   #it gives 0000123 means has length 7, prviously space filled by 0's.

OUTPUT :

%07d
0000123

------------------------------------------------------------------------------------------------------------------------------------------

18. Convert other class element to string class

-> to_s

It is used for convert other class oblect(variable) to object of string class.

Example :

a=5
puts a.class
a=a.to_s
puts a.class


OUTPUT :

Integer
String


-----------------------------------------------------------------------------------------------------------------------------------------

19. METHODS FOR CONVERTING TO NON-STRING

-> bytes

It is used for return array of bytes in self.

Example :

a='hello'
puts a.bytes

OUTPUT :
104
101
108
108
111

-> chars

It is used for return array of chars in self.

Example :

a='hello'
puts a.chars

OUTPUT :
h
e
l
l
o

-> codepoints 

It is used for return array of integer ordinals of characters.

It is like 'bytes' method.

-> getbyte

It is used for return the byte at zero based index as integer.

Example :

a='hello23'
puts a.getbyte(5)  # byte of 2 (at index 5) is 50

OUTPUT :

50

----------------------------------------------------------------------------------------------------------------------------------------

20. Methods for Partition

-> lines

It returns the self , which is partition by given character as a line.

For Example :

a='hello world'
puts a.lines('w')

OUTPUT :

hello w
orld

-> partition 

It returns 3-element array determined by the first substring that matches a given substring or regexp.

Example :

a='hello world'
print a.partition('e')
puts ()
print a.partition('x')
puts ()
print a.partition('l')
puts()

OUTPUT :

["h", "e", "llo world"]
["hello world", "", ""]
["he", "l", "lo world"]

-> rpartition

It returns 3-element array determined by the last substring that matches a given substring or regexp.

Example :

a='hello world'
print a.rpartition('e')
puts ()
print a.rpartition('x')
puts ()
print a.rpartition('l')
puts()


OUTPUT :

["h", "e", "llo world"]
["", "", "hello world"]
["hello wor", "l", "d"]

-> split 

It returns a array of substrings determined by a deliminator -regexp or string- or, if block given, passes those substrings to the block.

Example :

a='hello world'
print a.split('e')
puts
print a.split(' ')
puts
print a.split(//,6)
puts

OUTPUT :

["h", "llo world"]
["hello", "world"]
["h", "e", "l", "l", "o", " world"]

-------------------------------------------------------------------------------------------------------------------------------------------

21. Methods for matching

-> scan

It returns an array of substrings matching a given regexp or string, or if a block given,passes each matching substring to the block.

Example :

a='hello world'
print a.scan(//)
puts
print a.scan(/.../)
puts
print a.scan(/(...)(...)(...)/)
puts

OUTPUT :

["", "", "", "", "", "", "", "", "", "", "", ""]
["hel", "lo ", "wor"]
[["hel", "lo ", "wor"]]

------------------------------------------------------------------------------------------------------------------------------------------

22. Numeric methods for strings

-> hex

It returns the integer value of the leading characters, interpreted as hexadecimals.

Example :

a='hello world'
puts a.hex
b='256'
c='ab256'
puts b.hex
puts c.hex
d='1'
puts d.hex
e='ab1'
puts e.hex

OUTPUT :

0
598
701014
1
2737


-> oct 

It returns integer value of the leading characters, interpreted as octals. 


Example :

a='hello world'
puts a.oct
b='256'
c='ab256'
puts b.oct
puts c.oct
d='1'
puts d.oct
e='ab1'
puts e.oct

OUTPUT :

0
174
0
1
0

-> ord

It returns the integer ordinal of first character in self.

Example :

a='hello world'  
puts a.ord       #print integer ordinal of h (104)
b='256'
c='ab256'
puts b.ord       #print integer ordinal of 2 (50)
puts c.ord       #print integer ordinal of a (97)
d='1'
puts d.ord       #print integer ordinal of 1 (49)
e='ab1'
puts e.ord       #print integer ordinal of a (97)

OUTPUT :

104
50
97
49
97

-> to_i

It returns the integer value of leading characters , interpreted as an integer.

Example :

a='hello world'  
puts a.to_i      #print 0 because it has characters
b='256'
c='ab256'
puts b.to_i      #print 256 
puts c.to_i      #print 0
d='1'
puts d.to_i      #print 1
e='25ab1'
puts e.to_i      #print 25

OUTPUT :
0
256
0
1
25


-> to_f

It returns the float value of leading characters, interpreted as a floating number.

Example :

a='2.58'  
puts a.to_f      #print 2.28
b='2.45e-2'      
c='ab256'
puts b.to_f      #print 0.0245 
puts c.to_f      #print 0.0
d='1'
puts d.to_f      #print 1.0
e='25.85ab1'
puts e.to_f      #print 25.85

OUTPUT :

2.58
0.0245
0.0
1.0
25.85


-----------------------------------------------------------------------------------------------------------------------------------------

23. Methods for Strings and Symbols

-> to_sym

It returns the symbol corresponding to str, creating the symbol if it did not previously exist.

Example :

my_str1 = 'foo'
my_str2 = 'bar baz'
puts my_str1==:foo
my_sym1 = my_str1.to_sym
my_sym2 = my_str2.to_sym
puts my_sym1==:foo

OUTPUT :

false
true

-> inspect 

It returns a printable version of self, enclosed in double-quotes, and with special characters escaped

Example :

my_str1 = 'foo'
my_str2 = 'bar baz'
puts my_str1.inspect
puts my_str2.inspect

OUTPUT :

"foo"
"bar baz"


------------------------------------------------------------------------------------------------------------------------------------------

24. Methods for iteration in strings

-> each_byte

Calls the given block with successive byte in self.

Example :

my_str1 = 'foo'
my_str1.each_byte{|b| print b ,' '}
puts

OUTPUT :

102 111 111 

-> each_char

Calls the given block with successive char in self.

Example :

my_str1 = 'foo'
my_str1.each_char{|b| print b ,' '}
puts

OUTPUT :

f o o 

-> each_codepoint 

Calls the given block with successive codepoints in self.

Example :

my_str1 = "foo\u0259"
my_str1.each_codepoint{|b| print b ,' '}
puts

OUTPUT :

102 111 111 601 

-> each_line

Calls the given block with successive line in self, as determined by a given record separator.

Example :

example="hello world"
example.each_line('l'){|n| p n}   # p means print

OUTPUT :

"hel"
"l"
"o worl"
"d"

-> upto




Example :

example='a8'
example.upto('c9'){|n| print n,' '}   #print till c9
puts
example.upto('c9',true){|n| print n,' '} #print till c8 , stop when reached c9
puts 

OUTPUT :

a8 a9 b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 
a8 a9 b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 c0 c1 c2 c3 c4 c5 c6 c7 c8






----------------------------------------------------------------------------------------------------------------------------------------
