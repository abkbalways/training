Ruby Strings By Ajay Agrawal at Beryl Systems 


Strings : 

A string object in ruby holds and manipulates an arbitrary sequence of one or more bytes, typically representing characters that represent human language.

The Simplest string enclosed in single quotes .

Example :

my_name ='Ajay'    #my_name is the varible which holds 'Ajay' string

puts my_name


OUTPUT :

Ajay


-> Apostrophe Character

If we need to place apostrophe character in single quote , precided by backslash (\).

Example :

text ='I don\'t have a dog'

puts text


OUTPUT :

I don't have a dog

----------------------------------------------------------------------------------------------------------------------------------------

String Methods :


1. sub and sub!

sub - It is used for substitute the given string, but it substitute string temporarily and if we use that string again it respond like previous string.

Ex -

puts "Enter Your Name :"
text =gets
puts text.sub(text,'Student') #Substitute input name by Student
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Ajay


it substitute only first word or character of a string.

Example :

text ="hello"
puts text.sub('l','*') #Substitute hello

OUTPUT :

he*lo


sub! - It is used for substitute the given string, it substitute string permanently. if we use string again it respond like new updated string.

Example :

puts "Enter Your Name :"
text =gets
puts text.sub!(text,'Student') #Substitute input name by Student Permanently
puts text

OUTPUT :

Enter Your Name :
Ajay
Student
Student

.....................................................................................................................................

2. gsub 

It is used for temporarily substitute character or word globally .

Example :

text ="hello"
puts text.gsub('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
hello


gsub! - It is used for permanently substitute character or word globally.

Example :

text ="hello"
puts text.gsub!('l','*') #Substitute l globallay
puts text

OUTPUT :

he**o
he**o

........................................................................................................................................

3. Methods for creating a String

new :

It is used for create new string .

Ex :

s = String.new

s1 = String.new("Ajay")

s2 = String.new(capacity: 20)   # it is used for make initial capacity of string buffer

s3 = String.new(encoding: 'UTF-8') # With encoding keyword, returns a copy of string with specified encoding


try_convert :

Its return a new string , created from  a given object.

.......................................................................................................................................

4. Methods for freeze String

-> string.freeze

It is used for freeze a string , it means we cannot update that.

Ex :

a='ajay'
a.freeze
a << ' agrawal'
puts a

OUTPUT :

Traceback (most recent call last):
test.rb:3:in `<main>': can't modify frozen String: "ajay" (FrozenError)


-> string.frozen?

It is used for check string is freeze or not. it returns true or false.

Example :

a='ajay'
a.freeze
puts a
puts a.frozen?

OUTPUT :

ajay
true


.......................................................................................................................................


5. Methods for Querying String

-> length,size

It is used for count the characters in string.

Example :

a='ajay'
b='rahul'
puts a.length
puts b.size

OUTPUT :

4
5


-> empty?

It is used for check string is empty or not . it returns input or output.

Example : 

a=String.new('Ajay')
b=String.new
puts a.empty?
puts b.empty?

OUTPUT :

false
true

-> bytesize

It is used for print return bytesize of string.\

Example :

a=String.new('Ajay')
b=String.new
puts a.bytesize
puts b.bytesize

OUTPUT :

4
0

-> count

It is used for count the substring or specific characters.

Example :

a=String.new('My name is Ajay')
b= a.count "/[Aa]/"  # it counts the both A or a
puts "The Occurence of A or a is #{b}"


OUTPUT :

The Occurence of A or a is 3


.........................................................................................................................................

6. Methods for Querying Substrings

-> =~

It returns the index of first substring that matches the given regex. Indexing is start from 0 and goes on till length-1.

Example :

a="Ajay"
puts a =~ /a/


OUTPUT :

2


-> index

It returns the index of first occurence of given substring.

Ex :

a='While writing any topic in an exam or competition needs paras.'
puts a.index('an')

OUTPUT :

14

-> rindex

It returns the index of last occurence of given substring.\

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.rindex('an')

OUTPUT :

27

-> include

It returns true if substring is found in string , other wise false .

Example :

a='While writing any topic in an exam or competition needs paras.'
puts a.include?('an')
puts a.include?('ana')


OUTPUT :

true
false

-> match

It returns the matched substring , if it is matched otherwise nil.

Example :

a='While writing any topic in an exam or competition needs or paras.'
b= a.match(/any/)
c= a.match('abc')
puts ("matched substring of any is #{b} .")
puts ("matched substring of abc is #{c} .")


OUTPUT :

matched substring of any is any .
matched substring of abc is  .

-> match?

It retrns the true if string is matched with a regex , otherwise false.

Example :

a='While writing any topic in an exam or competition needs or paras.'
puts a.match?(/any/)
puts a.match?('abc')

OUTPUT :

true
false

-> start_with?

It gives true if string is start with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with vowels ?"
puts a.start_with?(/[aeiou]/)
puts "string a is starting with consonants ?"
puts a.start_with?(/[bcdfghjklmnpqrstvwxyz]/)

OUTPUT :

string a is starting with vowels ?
false
string a is starting with consonants ?
true


->end_with

It gives true if string is end with any of the given substrings.

Example :

a='while writing any topic in an exam or competition needs or paras.'
puts "string a is starting with dot(.) ?"
puts a.end_with?('.')

OUTPUT :

string a is starting with dot(.) ?
true

......................................................................................................................................

7. Methods for Querying Encodings

-> encoding

It is used for return the encoding type which is used by string.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts a.encoding

OUTPUT :

UTF-8

-> unicode_normalized

It is used for check , string is in unicode normalized form or not. It returns the true or false.

Example :

a='while writing any topic in 45 an exam or competition needs or paras.'
puts "string a is in unicode normalized form ? "
puts a.unicode_normalized?


OUTPUT :

string a is in unicode normalized form ? 
true

-> valid_encoding 

It returns true if string is encoded correctly otherwise false.

Example :

a= "\xc2\xa1"
b= "\xC3"
c=  "\x80"

puts a.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("utf-8").valid_encoding?
puts b.force_encoding("iso-8859-1").valid_encoding?
puts c.force_encoding("utf-8").valid_encoding?

OUTPUT :

true
false
true
false

-> ascii_only

It returns true only if string contains all ascii characters , otherwise false.

Example :

text1="i dont know about Ï’" 
text2="i dont know about i"
puts "text1 has only ascii characters ?"
puts text1.force_encoding("utf-8").ascii_only?
puts "text2 has only ascii characters ?"
puts text2.force_encoding("utf-8").ascii_only?


OUTPUT :

text1 has only ascii characters ?
false
text2 has only ascii characters ?
true

---------------------------------------------------------------------------------------------------------------------------------------

8. Others Querying methods in ruby :

-> sum

it gives the sum of binary values of each byte of string.

Example :

str='AB'
puts str.sum()

OUTPUT :

131

-> hash

It returns the integer hash code for strings.

Example :

str='AB'
puts str.hash


OUTPUT :

235975447823673739

-----------------------------------------------------------------------------------------------------------------------------------------

9. Methods for comparing in strings

-> == & ===

It give true if both strings has same content, otherwise false.

Example :

str1='Rahul'
str2='rahul'
str3='Rahul'
puts(str1===str2)     # use of === , it also check cases
puts(str1==str2)      # use of == , it also check cases
puts(str1===str3)     # str1 and str3 is completely equal

OUTPUT :

false
false
true

-> eql?

Returns true if content is same of both strings, otherwise false.

Example :

str1='Rahul'
str2='rahul'
str3='Rahul'
puts str1.eql?(str2)    # it also check cases
puts str1.eql?(str3)     # str1 and str3 is completely equal

OUTPUT :

false
true


-> <=>

It returns -1 if first string is smaller,1 if first string is larger and 0 if both are equal.

Example :

str1='rahul'
puts str1<=>'rahula'
puts str1<=>'rahu'
puts str1<=>'rahul'

OUTPUT :

-1
1
0

Important Point : upper case is smaller than lower case.because ASCII values of 'a' is 97 and 'A' is 65.


-> casecmp

It is used for compare two strings , ignoring thats cases. return 1  if first is bigger , -1 if first is smaller and 0 if both are equal.

Example :

str1='rahul'
str2='Rahul'
str3='Rahu'

puts str1.casecmp(str2) # both are equal because ignore cases
puts str1.casecmp(str3) # return 1 because str1 is larger than str3
puts str2.casecmp(str3) # return 1 because str2 is larger than str3

OUTPUT :

0
1
1

-> casecmp?

It is used for comparing two strings with ignore cases. it returns true if they are same othewise false.

Example :

str1='rahul'
str2='Rahul'
str3='Rahu'

puts str1.casecmp?(str2) # both are equal because ignore cases
puts str1.casecmp?(str3) # return false because str1 is not equals to str3
puts str2.casecmp?(str3) # return false because str2 is not equals to str3

OUTPUT :

true
false
false


------------------------------------------------------------------------------------------------------------------------------------- 

METHODS FOR MODIFYING A STRING

11. Insert into string

-> insert

It is used for modify string . it takes two arguments , first is position and second is substring which will be added.

Example :

str= 'rahul'
str2='rahul'
str.insert(3,'man')     #it insert after 3rd character from starting
puts str
str2.insert(-2,'man')    #it insert at 2nd position from end
puts str2

OUTPUT :

rahmanul
rahumanl


-> <<

It is used for concatenation string with substring.

Example :

str1= 'rahul'
str2=' agrawal'
str3= 'jatin'
puts str1 << str2
puts str3<<' chaudhary'

OUTPUT :

rahul agrawal
jatin chaudhary


------------------------------------------------------------------------------------------------------------------------------------------

12. Substitution of strings

-> sub - Explained above

-> gsub - Expalined above

-> succ or next 

It is used for print successor of the given string. it means last character of string is increasing by 1.

Example :

str1= 'rahul'
puts str1.succ
puts str1
puts str1.next

OUTPUT :

rahum
rahul
rahum

For change permanently use succ! or next!.

-> replace 

It is used for replace current string with another.

Example :

str1= 'rahul'
puts str1
puts str1.replace('jatin')    # replace 'rahul' by 'jatin'
puts str1

OUTPUT :

rahul
jatin
jatin


-> reverse

It is used for reverse the string.

Example :

str1= 'rahul'
puts str1
puts str1.reverse    # reverse 'rahul' 
puts str1

OUTPUT :

rahul
luhar
rahul

For reverse permanently string use reverse! .

-> setbyte

It is used for change given index substring by substring of given byte.

It takes two parameters , index of changable substring and byte of substring which will replace that.

Example :

str1= 'rahul'
str1.setbyte(2,97)   # change index 2(h) by byte 97(a)
puts str1

OUTPUT :

raaul


-> tr!

It replaces specified characters with specified replacement characters.

Example :

str1= 'i dont have doog'
str2='i have a car'
str3='my name is ajay'
str1.tr!('og','ag')
puts str1
str2.tr!('aeiou','*')
puts str2
str3.tr!('j','All')
puts str3

OUTPUT :

i dant have daag
* h*v* * c*r
my name is aAay


-> tr_s!

It is like tr!, but it removes duplicate characters also.

Example which differenciate between tr and tr_s :

str1= 'i dont have doog'
str2= 'i dont have doog'
str1.tr_s!('og','ag')
str2.tr!('og','ag')
puts str1
puts str2


OUTPUT :

i dant have dag
i dant have daag


----------------------------------------------------------------------------------------------------------------------------------------

13. Casing methods in Ruby

-> capitalize!

It is used for make first letter of string in upcase and others in downcase.

Example :

str1= 'i dont have doog'
str1.capitalize!
puts str1

OUTPUT :

I dont have doog

-> downcase!

It is used for make complete string in downcase.

Example :

str1= 'I Dont Have Doog'
str1.downcase!
puts str1

OUTPUT :

i dont have doog

-> upcase!

It is used for make complete string in uppercase.

Example :

str1= 'i dont have doog'
str1.upcase!
puts str1


OUTPUT :

I DONT HAVE DOOG

-> swapcase

It is used for swap cases of characters in string.

Example :

str1= 'I Dont Have Dog'
str1.swapcase!

puts str1


OUTPUT :

i dONT hAVE dOG


----------------------------------------------------------------------------------------------------------------------------------------



