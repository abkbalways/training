File Handling in Ruby by Ajay Agrawal at Beryl Systems ,

File Handling : 

It is a way for processing a file such as create new file, reading content of a file, write in content of file, rename a file, appending
content of a file and delete a file.


Common Modes of File Handling :

"r" - read-only mode for a file, if file not exist it gives error , it cannot overwrite a file .

"r+" - read and write mode for a file, if file not exist it gives error, it cannot overwrite a file .

"w" - write only mode for a file, if file not exist it create new file. if exist, overwrite that.

"w+" - write and read mode for a file , if file not exist it create new file. if exist , overwrite that.

"a" - write only mode for file, if file already exists it append the content of file, otherwise create new file. it cannot overwrite 
the previous file.

"a+" - read and write mode for file, if file already exists it append the content of file, otherwise create new file. it cannot overwrite 
the previous file.

1. Creating New File

(i) File.new()

We can use File.new() for reading, writing or both, accordingly to the mode string. we can use fileobject.close() method for close that file.

It create a file in a folder in which we run the ruby file.

Ex - 

file_object = File.new("sample.txt","w+")
file_object.syswrite("Hello World")
file_object.close()


OUTPUT : 

It can make a file with name sample.txt and content "Hello World" in same folder.


(ii) File.open

We can use  File.open(file_name,mode) for create a file and assign file_object to that file. we can be associated that file with block.
but through File.new() we can not.

Ex -

File.open("sample2.txt","w+") do |file_object|
file_object.syswrite("File Handling")
end

OUTPUT :

It make a file in same folder with content "File Handling" and thats name is sample2.txt. 

-------------------------------------------------------------------------------------------

2. For Reading and Writing a File

(i) sysread and syswrite methods

These are used for write and read from file.

if we use sysread mode will be read or read and write.

if we use syswrite mode will be write or read and write.

Example :

We have a file with name "sample2.txt" and content

"My Name is Ajay Agrawal. I am now doing some programs in ruby." 

Now, 

file_object = File.open("sample2.txt","r+")
    if file_object
      content = file_object.sysread(5)
      puts content
      content = file_object.sysread(8)
      puts content
      file_object.syswrite("Hello World")
    else
      puts "Unable to Open"
    end
file_object.close()

OUTPUT :

My Na
me is Aj

and it change sample2.txt content to

"My Name is AjHello World I am now doing some programs in ruby."

Explanation : Firsty it read content of sample2.txt from character 1 to 1+5-1. then pointer shift to 6 , Secondly it read from character 6 to
6+8-1. then pointer shift to 14 (6+8) , Thirdly it write "Hello World" from character 14. and overwrite content on that places. now 
pointer shift to 24(14+11-1). 11 is the length of "Hello World". 

--------------------------------------------------------------------------------------------------------------------------


Important Methods in File


1. absolute_path -

It is used for take absolute path of file before creating.

For Ex :

irb(main):002:0> File.absolute_path('sample.txt')
=> "/home/beryl/training/ruby/File Handling in Ruby/sample.txt"


2. absolute_path?

Returns true if file_name is an absolute path, and false otherwise.

For Ex :

irb(main):003:0> File.absolute_path?('sample.txt')
=> false
irb(main):004:0> File.absolute_path?('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> true

true, because sample.txt present at given path.

3. ::basename

Returns the last component of the given file path.

irb(main):009:0> File.basename('/home/beryl/training/ruby/ruby_string.txt')
=> "ruby_string.txt"

irb(main):010:0> File.basename('/home/beryl/training/ruby')
=> "ruby"

irb(main):012:0> File.basename('/home/beryl/training/ruby/ruby_string.txt','.txt')
=> "ruby_string"

irb(main):013:0> File.basename('/home/beryl/training/ruby/ruby_string.txt','.*')
=> "ruby_string"

4. dirname

Returns all but the last component of the given file path.

irb(main):015:0> File.dirname('/home/beryl/training/ruby/ruby_string.txt')
=> "/home/beryl/training/ruby"

5. exist?(file_name)

It returns true if file is exist on same folder or on given path.

Ex - 

pp File.exist?("sample2.txt")

OUTPUT : 

true 

6. atime(file_name)

It gives the last access time of given file.

Ex - 

pp File.atime("sample.txt")
pp File.atime("sample.txt").year

OUTPUT : 

2022-01-19 14:51:57.561076929 +0530
2022


7. birth time 

It gives the creation time of file.

Ex - 

pp File.birthtime("sample.txt")

OUTPUT :

2022-01-19 14:51:52.581088297 +0530

8. ctime 

It gives the change time for file.

Ex - 

pp File.ctime("sample2.txt")

OUTPUT :

2022-01-19 17:57:22.07091761 +0530

9. directory?

Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise.

Ex - irb(main):022:0> File.directory?('/home/beryl/training/ruby')
=> true
irb(main):023:0> File.directory?('/home/beryl/training/ruby/ruby_string.txt')
=> false

10. empty?

It returns the true if given file is empty, otherwise false. if file not exist, it return false.

Ex - 

pp File.empty?("sample2.txt")
pp File.empty?("sample.txt")

OUTPUT : 

false
true

11. file?

Returns true if the named file exists and is a regular file.

Ex - 

irb(main):027:0> File.file?('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> true

irb(main):028:0> File.file?('/home/beryl/training/ruby/File Handling in Ruby')
=> false

12. ftype

Identifies the type of the named file; the return string is one of “file'', “directory'', “characterSpecial'', “blockSpecial'',
“fifo'', “link'', “socket'', or “unknown''.

Ex - 

irb(main):033:0> File.ftype('/home/beryl/training/ruby/File Handling in Ruby/file_handling_basics')
=> "file"


13. identical?

Returns true if the named files are identical.

Ex -

pp File.identical?("sample2.txt","sample.txt")

OUTPUT : 

false


14. size or size?

Returns the size of file_name.

Ex -

irb(main):036:0> File.size?('/home/beryl/training/ruby/File Handling in Ruby/sample2.txt')
=> 63

irb(main):038:0> File.size('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> 63

15. rename

Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.

Ex -

File.rename("sample3.txt","sample.txt")

OUTPUT :

It rename the file from sample3.txt to sample.txt

16. stat

Returns a File::Stat object for the named file (see File::Stat).

Ex -

irb(main):039:0> File.stat('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> #<File::Stat dev=0x805, ino=7996486, mode=0100664, nlink=1, uid=1000, gid=1000, rdev=0x0, size=63, blksize=4096, blocks=8, atime=2022-01-19 18:15:32.674449253 +0530, mtime=2022-01-19 18:13:18.881442059 +0530, ctime=2022-01-19 18:23:23.706857925 +0530>

17. mtime

Returns the modification time for the named file as a Time object.

Ex :

irb(main):041:0> File.mtime('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> 2022-01-19 18:13:18.881442059 +0530

18. truncate

Truncates the file file_name to be at most integer bytes long. Not available on all platforms.

Ex :

irb(main):042:0> File.size('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> 63

irb(main):043:0> File.truncate('/home/beryl/training/ruby/File Handling in Ruby/sample.txt',5)
=> 0

irb(main):044:0> File.size('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> 5

Explanation : 

It remove all data except starting 5 characters.

19. delete

It is used for delete the file.

Ex :

irb(main):046:0> File.delete('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> 1

20. zero?

Returns true if the named file exists and has a zero size.

Example :

irb(main):050:0> File.zero?('/home/beryl/training/ruby/File Handling in Ruby/sample2.txt')
=> false

irb(main):051:0> File.zero?('/home/beryl/training/ruby/File Handling in Ruby/sample.txt')
=> true
 
------------------------------------------------------------------------------------


