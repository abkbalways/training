METHODS OF ARRAY CLASS BY AJAY AGRAWAL AT BERYL SYSTEMS 


Arrays :

Array is an ordered and integer indexed collections of an objects, called elements.

Ex : a = [12 , 15 , 45 , 78 ,78]

a is an array of integers class.

the indexes are,

a[0] = 12
a[1] = 15
a[2] = 45
a[3] = 78
a[4] = 78


1. Methods for creating array by array literals

-> []

we Can create array by putting objects between [].

[1, 2 , 3 ]

we may place expressions in an array.

[1+2 , 4*5 ,5-3]

[1 , [2, [2 + 3]]]

-> %w and %W (String Array Literals)

We can write an array of strings with %w(non-interpolable) or %W(polable)

Example :

str1 = 'abc def ghi'
str2 = '1'
arr1 = %W{#{str1}}
puts arr1
arr2 = %w{#{str1}}
puts arr2
arr3 = %W{#{str2}+#{1+1}}
puts arr3
arr4 = %w{#{str2}+#{1+1}}
puts arr4

OUTPUT :

abc def ghi
#{str1}
1+2
#{str2}+#{1+1}


-> %i and %I (Symbol Array Literals)

We can write an array of symbols with %i(non-interpolable) or %I(polable)

Example :

str1 = 'abc def ghi'
str2 = '1'
arr1 = %I{#{str1}}   #make [":abc" , ":def" , ":ghi"]
puts arr1
arr2 = %i{#{str1}}   #make [":#{str1}"]
puts arr2
arr3 = %I{#{str2}+#{1+1}}  # make [":1+2"]
puts arr3
arr4 = %i{#{str2}+#{1+1}}  # make [":#{str2}+#{1+1}"]
puts arr4

OUTPUT :

abc def ghi
#{str1}
1+2
#{str2}+#{1+1}


2. Methods for Creating array by Array class

Array can be contain different types of objects , For Example

ary= [12, 'abc', 2.6, 56]

We can also create array by calling Array.new with 0,1 or 2 arguments.

Example :

ary1 = Array.new         #it is for create array without give size
ary2 = Array.new(4)      #it is for create array with size
ary3 = Array.new(3, 5)   #it is for create array with size 3 and put 5 as default on every index
print ary1, ' '
puts
print ary2, ' '
puts
print ary3, ' '  
puts


OUTPUT :

[] 
[nil, nil, nil, nil] 
[5, 5, 5] 


Another Example :

ary = Array.new(4) {|i| i.to_s}
print ary, ' ' 
puts

OUTPUT :

["0", "1", "2", "3"]

We can also make multi dimensional array simply

Example :

ary = Array.new(4) {Array.new(3)}
print ary, ' ' 
puts

OUTPUT :

[[nil, nil, nil], [nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 


-> Try Convert

It convert an object of any class to an array by using to_ary strictly, result nil if object is not responded. if object is already of array class it returns self.

Example :

ary = Array.new(2,5)
str = String.new("My Name is Ajay")
print ary, ' '
puts 
print str, ' '   #result nil because str don't responded
puts
puts Array.try_convert(str)

OUTPUT :
[5, 5] 
My Name is Ajay 


----------------------------------------------------------------------------------------------------------------

3. Methods For querying in array

-> length, count, size

These returns a size of array.

Example :

arr1 = [5, 8, 'rsp' , 5.8]
puts arr1.length
puts arr1.size
puts arr1.count

OUTPUT :

4
4
4


-> include?

It is used for check the given element is available in array or not.

-> empty?

It is used for check the given array is empty or not.

-> all?

It is used for check the all elements of an given array meets the given condition or not.


Example :

arr1 = [5, 8, 7 , 5.8]
puts arr1.include?(4)                    #it checks the given value is available in array of not
puts arr1.empty?                         #it checks the given array is empty or not  
puts arr1.all?{|element| element<20}     #it checks the all elements of an array meet a cretiria or not


OUTPUT : 

false
false
true

-> none?

It returns true when not of the any element of an array meets the given condition , otherwise false.

-> one?

It returns true when exactly 1 element meets the given condition, otherwise false.

-> count 

It returns the no. of elements which meets the given condition.

-> any?

It returns true if atleast one elemetn of an array meets the condition


Example :

arr1 = [5, 8, 7 , 5.8]
puts arr1.none?(6)                    #it returns true because none of the any element == 6
puts arr1.one?{|element| element>6}   #it returns false because 2 elements(7, 8) meet the condition
puts arr1.one?{|element| element>7}   #it returns true because exactly one element(8) meet the condition
puts arr1.count{|element| element<6}  #it returns 2 because 2 elements(5,5.8) meets the condition 
puts arr1.any?{|element| element.is_a?Float} #it returns true because atlease one element(5.8) meets condition


OUTPUT :

true
false
true
2
true


-> find_index , index

It returns the index of first element which matches the given condition.

-> rindex

It returns the index of last element which matches the given condition.

Example :

arr = [5, 8, 7, 5.8, 6, 8, 7]
puts arr.index(7)                    #it returns 2 because first index of 7 is 2
puts arr.index{|element| element==8} #it returns 1 because first index of 8 is 1
puts arr.find_index(7)               #it returns 2 because first index of 7 is 2
e = arr.index
puts e.each{|element| element==8}    #it returns 1 because first index of 8 is 1
puts arr.rindex(7)                   #it returns 6 because last index of 7 is 6


OUTPUT :

2
1
2
1
6


-> hash

It returns the integer hash code for self array.

Two arrays with same content has same hash codes.

Hash value is different at different time for same value.

Example :

arr1 = [1, 2, 5]
arr2 = [1, 5, 2]
arr3 = [1, 2, 5]
puts arr1.hash
puts arr2.hash
puts arr3.hash
puts arr1.hash == arr2.hash
puts arr1.hash == arr3.hash


OUTPUT :

603510430648538357
3116044225333818997
603510430648538357
false
true
  

------------------------------------------------------------------------------------------------------------------------------


4. Methods For Comparing

-> <=>

It returns -1, 0, 1 as array is less than, equal to or greater than to another array.

-> ==

It returns true if self array is equals to another array, otherwise returns false.

-> eql?

It returns true if each element (with datatype) is equals to another array, otherwise returns false.


Example :

arr1 = [1, 2, 5.0]
arr2 = [1, 5, 2]
arr3 = [1, 2, 5]
puts arr1<=>arr2        #It returns -1 because it check contiguously and at index 1, 2 is less than 5
puts arr1==arr2         #It returns false because arr1 is not equals to arr2 (by indexing)      
puts arr1==arr3         #It returns true because arr1 is equals to arr3 (ignore datatype)
puts arr1.eql?(arr2)    #It returns false because arr1 is equals to arr3 (5 and 5.0 is not equals)



OUTPUT :

-1
false
true
false


------------------------------------------------------------------------------------------------------------

Methods For Fetching

These methods do not modify self array.

5. []

-> array[index]

When a sigle integer argument index is given, returns the element at that index.

If index is negative, counts relative to the end of self array.

if index is out of range , return nil.


-> array[start,length]

It returns an array from start to length-1.

-> array[range]

It returns the elements of array which index is in range.

If starting is negative (take starting index from end) 

and if end is negative (take end index from end)


Example :

arr = [1, 2, 5, 5, 8, 9]
puts arr[0]           #It returns 1 (at index 0 )
puts arr[-1]          #It returns 9 at index 1 (from end)
puts arr[7]           #It returns nil because out of range
print arr[0,5],' '    #It returns 0 to 5-1 elements by index
puts
print arr[0..2],' '   #It returns 0 to 2 elements by index
puts
print arr[-5..3],' '  #It returns 2,5,5 (Start from index 1(5 from end))
puts
print arr[2..-2],' '  #It returns 5,5,8 (End at index 4(2 from end))
puts

OUTPUT :

1
9

[1, 2, 5, 5, 8] 
[1, 2, 5] 
[2, 5, 5] 
[5, 5, 8] 

-> Array[aseq]

It returns an array on given sequence.


Example :

a = ['--', 'data1', '--', 'data2', '--', 'data3']
a[(1..).step(2)] # => ["data1", "data2", "data3"]


6. fetch

It returns the element at offset index.

Example :

arr = [1, 2, 5, 5, 8, 9]
puts arr.fetch(1)                                 #It will return 1 (at index 1)
puts arr.fetch(7,'can not find')                  #It will return 'can not find' default value , index is not present
puts arr.fetch(5,'can not find')                  #It will return 9 (at index 5)
puts arr.fetch(2){|element| "index is #{element}"} # It will return 5 (at index 2)
puts arr.fetch(8){|element| "index is #{element}"} # It will return 'index is 5' default value

OUTPUT :

2
can not find
9
5
index is 8


7. first and last

-> first

It will return most leading elements from array.

-> last

It will return most trailing elements from array.

Example :

arr = [1, 2, 5, 5, 8, 9]
pp arr.first()     #Return 1 (It is first element)
pp arr.first(10)   #Return complete array because 10 is greater than the length of an array
pp arr.first(2)    #Return 1,2 (First 2 elements of an array)
pp arr.first(0)    #Return empty array (first 0 means nothing)
pp arr.last(5)     #Return 2,5,5,8,9 (Last 5 elements of an array)
pp arr.last(0)     #Return empty array (last 0 means nothing)

OUTPUT :

1
[1, 2, 5, 5, 8, 9]
[1, 2]
[]
[2, 5, 5, 8, 9]
[]


8. max , min and minmax

-> max

It will return the one or more maximum valued elements from array.

-> min

it will return the one or more minimum valued elements from array.

-> minmax 
 
it will return the minimum and maximum valued elements from array.


Example :

arr = [1, 2, 5, 5, 8, 9]
pp arr.max
pp arr.max(2)
pp arr.min
pp arr.min(2)
pp arr.minmax


OUTPUT :

9
[9, 8]
1
[1, 2]
[1, 9]


9. Other fetch methods 

[[2,5,7],[7,5,6,5],[2,4,6,8,10]].assoc(7)  #it returns the array in which parameter object is at 0 index.
=> [7, 5, 6, 5]

[2,5,7,9].at(2)                            #it returns the object at given index.
=> 7

[2,5,7,9].values_at(2)                     #it returns the values of given index or given index range. 
=> [7]

[2,5,7,9].values_at(1..5)
=> [5, 7, 9, nil, nil]

[[2,5,7],[7,5,6,5],[2,4,6,8,10]].dig(2)    #it returns the array or value at given index.
=> [2, 4, 6, 8, 10]

[[2,5,7],[7,5,6,5],[2,4,6,8,10]].dig(2,2)  #it returns the 2nd element of 2nd array (by index)
=> 6

[2,5,7,9].drop_while{|elem| elem<6}        #it returns the element from where condition is false till end. 
=> [7, 9]

[2,5,7,9].drop_while{|elem| elem>6}
=> [2, 5, 7, 9]

[2,5,7,9,3].drop_while{|elem| elem<6}   
=> [7, 9, 3]

[2,5,7,9,3].take_while{|elem| elem<6}      #it takes element from condition is true to first element which not meet condition.
=> [2, 5]

[2,5,7,9,3].sort                           #it return the sort form of array by ascending order.    
=> [2, 3, 5, 7, 9]

[2,nil,5,9.8,'das',nil].compact            #it returns the given array which not containing nil values.
=> [2, 5, 9.8, "das"]

[1, 58 ,'ds', 20.8,'cds'].reverse          #it returns the reverse of given array.
=> ["cds", 20.8, "ds", 58, 1]

[23,25,85,69,45].select{|element| element>30}   #it returns the array of elements which meets the condition
=> [85, 69, 45]

[23,25,'danya',85,'ganesh',69,'rajeev',45,'ramesh'].select{|element| element.to_s.start_with?'r'}
=> ["rajeev", "ramesh"]

[23,25,85,69,45].filter{|element| element>30}    #it is the alias of select
=> [85, 69, 45]

[23,25,'danya',85,'ganesh',69,'rajeev',45,'ramesh'].filter{|element| element.to_s.start_with?'r'}
=> ["rajeev", "ramesh"]

[23,25,85,69,45,58,85,25].uniq                  #it prints the array of unique elements from an array
=> [23, 25, 85, 69, 45, 58]

[1,2,3,4,5].rotate                              #it forward rotate the array
=> [2, 3, 4, 5, 1]

[1,2,3,4,5].rotate(3)                           #it rotate array forward at given times
=> [4, 5, 1, 2, 3]

[1,2,3,4,5].rotate(-3)                          #it rotates array backward at given times
=> [3, 4, 5, 1, 2]

[1,2,3,4,5,0].sample                            #it return any random element from array
=> 0

[1,2,3,4,5,0].sample
=> 3

[1,2,3,4,5,0].sample(3)                         #it returns the given no. of random elements from an array
=> [1, 5, 2]

[1,2,3,4,5,0].sample(3)
=> [2, 5, 1]

[1,2,3,4,5,0].shuffle                           #it returns the random order of array
=> [4, 0, 1, 3, 2, 5]

[1,2,3,4,5,0].shuffle
=> [2, 5, 3, 1, 4, 0]


--------------------------------------------------------------------------------------------------------------------

10. METHODS FOR ASSIGNING IN ARRAY CLASS :

a=[54,58,96]

irb(main):005:0> a[4]=85               #it is used for assigning element to an array

irb(main):006:0> pp a
[54, 58, 96, nil, 85]
=> [54, 58, 96, nil, 85]

-----------------------------------------------

pp a
[54, 58, 96, nil, 85]
=> [54, 58, 96, nil, 85]

irb(main):008:0> a.push(3,4,5)                      #add elements to self array appends
=> [54, 58, 96, nil, 85, 3, 4, 5]     

irb(main):009:0> a.append(6,7,8)                    #alias of push
=> [54, 58, 96, nil, 85, 3, 4, 5, 6, 7, 8]

irb(main):010:0> a1  = a<<9,10                      #add single element 1 time , if we give 2 that make another array inside the array

irb(main):011:0> pp a1
[[54, 58, 96, nil, 85, 3, 4, 5, 6, 7, 8, 9], 10]
=> [[54, 58, 96, nil, 85, 3, 4, 5, 6, 7, 8, 9], 10]


------------------------------------------------

[2, 5, 9]
irb(main):027:0> b.prepend(1,2,3)                   #add elements to self array prepends
=> [1, 2, 3, 2, 5, 9]

irb(main):028:0> b.unshift(0,1,2)                   #alias of prepend
=> [0, 1, 2, 1, 2, 3, 2, 5, 9]


------------------------------------------------

[12, 15, 56, 89]
irb(main):032:0> c.insert(1,25)                     #insert element at given position and shift the previous element to next 
=> [12, 25, 15, 56, 89]

irb(main):033:0> c.concat([45],[45,65,89])          #concat different arrays
=> [12, 25, 15, 56, 89, 45, 45, 65, 89]

------------------------------------------------

b.replace([25,56,89])                               #it will replace the content of self array with given content
=> [25, 56, 89]

irb(main):038:0> b.fill(52)                         #it will fill complete array with given argument
=> [52, 52, 52]

irb(main):039:0> b.fill(68,1)                       #it will fill complete array with given argument from given index to end
=> [52, 68, 68]

irb(main):040:0> b.fill(25,-2)                      #it will fill complete array with given argument from given index to end(-ve means start from end)
=> [52, 25, 25]


------------------------------------------------------------------------------------------------------------------------------

11. Mehtods for Deleting in Array Class


a=[52,56,89,65,56]
irb(main):049:0> a.pop                                  #it is used for remove last index element from array
=> 56

------------------------------------------------------

a=[52,56,89,65,56]
irb(main):054:0> a.pop(2)                               #it will remove last 2 elements from an array
=> [65, 56]

------------------------------------------------------

a=[52,56,89,65,56]
irb(main):056:0> a.shift                                #it is used for remove 0 index element from an array
=> 52

------------------------------------------------------

a=[52,56,89,65,56] 
irb(main):058:0> a.shift(2)                             #it will remove first 2 elements from an array
=> [52, 56]

-------------------------------------------------------

a=[52,89,65,56,nil,nil]                 

irb(main):031:0> a.compact!                             #it will remove nil values from an array
=> [52, 89, 65, 56]

------------------------------------------------------

 a=[52,56,89,65,56]
irb(main):033:0> a.delete(56)                           #it remove the all elements which matches to an element given as parameter
=> 56
pp a
[52, 89, 65]

------------------------------------------------------

a=[52,56,89,65,56]
irb(main):039:0> a.delete_at(3)                         #it will remove element at given index
=> 65


------------------------------------------------------

a=[52,56,89,65,56]
irb(main):041:0> a.delete_if{|element| element<60}      #it will remove all elements which meet the given condition
=> [89, 65]


------------------------------------------------------

a=[52,56,89,65,56]
irb(main):043:0> a.keep_if{|element| element<60}         #it will keep all elements which meet the condition , others are removed
=> [52, 56, 56]


------------------------------------------------------

a=[52,56,89,65,56]
irb(main):045:0> a.reject!{|element| element<60}         #it wil remove all elements which meet the condition
=> [89, 65]


-------------------------------------------------------

a=[52,56,89,65,56]
irb(main):047:0> a.uniq!                                 #it will remove all duplicate elements from an array
=> [52, 56, 89, 65]


-----------------------------------------------------------------------------------------------------------------------

12. Methods for combining in an array

a=[1,2,3,4,5]
b=[1,3,0]

a&b
=> [1, 3]                                                #it will return the array containing elements present in both

--------------------------------------------------------

a.intersection(b)                                        #it will return the array containing elements present in both
=> [1, 3]

--------------------------------------------------------

a|b                                                      #it will return the array containing elements present in any given array, removes duplicate
=> [1, 2, 3, 4, 5, 0]

--------------------------------------------------------

a.union(b)                                               #it will return the array containing elements present in any given array, removes duplicates.

=> [1, 2, 3, 4, 5, 0]

---------------------------------------------------------

a+b                                                      #it will return the array which has combination of given arrays, included duplicate.
=> [1, 2, 3, 4, 5, 1, 3, 0]

---------------------------------------------------------

c= [5,5,6,8,9]
d=[5,6]

irb(main):071:0> c-d                                     #return the elements of array which is not found in other given array
=> [8, 9]

---------------------------------------------------------

c.difference(d)                                          #return the elements of array which is not found in other given array
=> [8, 9]

---------------------------------------------------------

c.product(d)                                             #return the all combination between given arrays

=> [[5, 5], [5, 6], [5, 5], [5, 6], [6, 5], [6, 6], [8, 5], [8, 6], [9, 5], [9, 6]]


---------------------------------------------------------------------------------------------------------------------

13. Methods for Iterating

a=[3,8,'ajay','rahul',98,5.8]
irb(main):002:0> a.each{|element| puts "#{element}  #{element.class}"}    #Passes each element to a given block.
3  Integer
8  Integer
ajay  String
rahul  String
98  Integer
5.8  Float

---------------------------------------------------------

a.reverse_each{|element| puts "#{element}  #{element.class}"}            #Passes each element, in reverse order, to a given block.
5.8  Float
98  Integer
rahul  String
ajay  String
8  Integer
3  Integer

----------------------------------------------------------

a.each_index{|element| puts "#{element}  #{a[element]}"}                  #Passes each element index to a given block.
0  3
1  8
2  ajay
3  rahul
4  98
5  5.8

------------------------------------------------------------

[1,2,3].cycle(3){|element| print element,' '}                             #calls the array , with 3 times
1 2 3 1 2 3 1 2 3

[1,2,3].cycle(3).first(7){|element| print element,' '}
=> [1, 2, 3, 1, 2, 3, 1]

------------------------------------------------------------

[1,2,3].combination(2){|element| pp element}                              #Calls a given block with combinations of elements of self; a combination does not use the same element more than once.
[1, 2]
[1, 3]
[2, 3]

-------------------------------------------------------------

[1,2,3].permutation(2){|element| pp element}                               #Calls a given block with permutations of elements of self; a permutation does not use the same element more than once.
[1, 2]
[1, 3]
[2, 1]
[2, 3]
[3, 1]
[3, 2]


--------------------------------------------------------------

[1,2,3].repeated_combination(2){|element| pp element}                      #Calls a given block with combinations of elements of self; a combination may use the same element more than once.
[1, 1]
[1, 2]
[1, 3]
[2, 2]
[2, 3]
[3, 3]


--------------------------------------------------------------

[1,2,3].repeated_permutation(2){|element| pp element}                      #Calls a given block with permutations of elements of self; a permutation may use the same element more than once.
[1, 1]
[1, 2]
[1, 3]
[2, 1]
[2, 2]
[2, 3]
[3, 1]
[3, 2]
[3, 3]


------------------------------------------------------------------------------------------------------------------------------


